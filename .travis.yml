sudo: required
services:
  - docker

#
# Global env vars willbe passed along to all scripts that travis invokes.
# Our deploy.sh needs git SHAs to tag images
# Also, disable all BS prompts coming from google cli
#
env:
  global:
    - GIT_SHA=$(git rev-parse HEAD)
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1 
#
# No preconfigured travis image available that has google cloud cli installed.
# Steps to setup our travis env:
# 1. More on this below
# 2. Install the google cloud cli.
# 3. Modify the shell by sourcing a file that gets downloaded with the CLI.
# 4. Install kubectl in travis env
# 5. Setup the auth for google cloud (think of IAM from AWS)
# 6. Set the project name for gcloud (there cloud be multipe projects in your account)
# 7. Set the zone name the cluster is created in
# 8. Set the k8x cluster name for gcloud to know which k8s cluster to work with
# 9. Login to docker (it uses env vars setup in travis)
# 10. Create an image for the web-app project
#
# For #5, we have always used env variables but gcp needs an account json file.
# We don't want to store the raw json file in travis or check-in to github.
# So we'll ask travis to ENCRYPT the file for us using travis CLI.
# The encrypted file can be safely checked-in.
# We will then delete the original json file to avoid accidentally checking it in.
# 
# Steps to encrypt the file using travis and then using it in our CI:
# It's hard to correctly setup ruby on windows (mac is easy).
# To avoid dealing with this nonsense, we'l just use a ruby container.
#
# docker run -it -v $(pwd):/kubernetes-workflow ruby:2.3 sh
# gem install travis
# travis login
# travis encrypt-file travis-service-account.json -r vaibhavdesai137/kubernetes-worflow --org
#
# Travis CLI should now thrown out a big "openssl..." cmd on the terminal and would have asked 
# us to use it in the "before_install" step. 
# Also, it should have created an ancrypyted version of our file travis-service-account.json.enc 
# This encrypted version is safe to checkin created.
# Delete the orginal travis-service-account.json
#
before_install:
  - openssl aes-256-cbc -K $encrypted_fa43a465cf42_key -iv $encrypted_fa43a465cf42_iv -in travis-service-account.json.enc -out travis-service-account.json -d
  - curl https://sdk.cloud.google.com | bash > /dev/null
  - source $HOME/google-cloud-sdk/path.bash.inc
  - gcloud components update kubectl
  - gcloud auth activate-service-account --key-file travis-service-account.json
  - gcloud config set project cellular-cider-242620
  - gcloud config set compute/zone us-west1-a
  - gcloud container clusters get-credentials kubernetes-workflow-cluster
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  - docker build -t vaibhavdesai137/kubernetes-workflow-webapp -f ./web-app/Dockerfile.dev ./web-app

# Use the hyphens to terminate tests else "npm run test" will wait for user inputs
script:
  # For whatever reason, travis hangs with this after executing tests
  # - docker run vaibhavdesai137/kubernetes-workflow-webapp npm run test -- --coverage --forceExit
  - docker run -e CI=true vaibhavdesai137/kubernetes-workflow-webapp npm run test -- --watchAll=false

# Travis knew how to deploy to beanstalk
# Unfortunately, it doesn't know how to do that for k8s
# So we'll have to write some steps that travis will execute for us
# Hence, the provider value is "script" instead of "elasticbeanstalk" like in previous docker example
deploy:
  provider: script
  script: bash ./deploy.sh
  on:
    branch: master
